// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserState {
  Activo
  Inactivo
  Suspendido
  Eliminado
  Asignado
}

enum UserRole {
  Operador
  Admin
  S_A
}

enum TruckState {
  Activo
  Inactivo
  Mantenimiento
  Transito
  Descarga
  Asignado
}

enum FuelType {
  DIESEL_B5
  DIESEL_B500
  GASOLINA_PREMIUM_95
  GASOLINA_REGULAR_90
  GASOHOL_84
  GASOHOL_90
  GASOHOL_95
  SOLVENTE
  GASOL
  PERSONALIZADO
}

enum DischargeStatus {
  pendiente
  en_proceso
  finalizado
  cancelado
}

enum DispatchStatus {
  PROGRAMADO
  CARGANDO
  EN_RUTA
  COMPLETADO
  CANCELADO
}

enum LocationCaptureMethod {
  GPS_AUTO
  GPS_MANUAL
  MANUAL_INPUT
  OFFICE_PLANNED
}

enum Role {
  ADMIN
  OPERADOR
  S_A
}

enum AssignmentStatus {
  PROGRAMADO
  CARGANDO
  EN_RUTA
  COMPLETADO
}

enum DispatchPriority {
  NORMAL
  ALTA
  URGENTE
}

enum LocationMethod {
  GPS_AUTO
  GPS_MANUAL
  MANUAL_INPUT
  OFFICE_PLANNED
}

// Nuevos enums para el sistema de historial
enum HistoryEventType {
  DISPATCH_CREATED
  DISPATCH_UPDATED
  DISPATCH_STARTED
  DISPATCH_COMPLETED
  DISPATCH_CANCELLED
  ASSIGNMENT_CREATED
  ASSIGNMENT_UPDATED
  ASSIGNMENT_COMPLETED
  DISCHARGE_STARTED
  DISCHARGE_COMPLETED
  TRUCK_LOCATION_UPDATE
  TRUCK_MAINTENANCE
  TRUCK_STATE_CHANGE
  USER_LOGIN
  USER_LOGOUT
  SYSTEM_EVENT
}

enum HistoryEntityType {
  USER
  TRUCK
  CUSTOMER
  DISPATCH
  ASSIGNMENT
  DISCHARGE
  SYSTEM
}

enum LocationType {
  carga
  descarga
  intermedio
}

model User {
  id                  Int      @id @default(autoincrement())
  dni                 String   @unique
  name                String
  lastname            String
  email               String   @unique
  password            String   @default("peru2025++")
  role                Role     @default(OPERADOR)
  state               UserState @default(Activo)
  currentLatitude     Float?    // Última ubicación GPS del conductor
  currentLongitude    Float?    // Última ubicación GPS del conductor
  lastLocationUpdate  DateTime? // Última actualización de ubicación del conductor
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  deletedAt           DateTime?

  // Relaciones
  assignments Assignment[]
  dispatches  Dispatch[]
  historyRecords HistoryRecord[]
  driverStats DriverStats[]
  frequentLocations FrequentLocation[]

  @@map("users")
}

model Truck {
  id                  Int       @id @default(autoincrement())
  placa               String    @unique
  typefuel            FuelType  @default(DIESEL_B5)
  customFuelType      String?   // Nombre del combustible personalizado
  capacitygal         Int
  lastRemaining       Decimal   @default(0.00) @db.Decimal(10, 2)
  state               TruckState @default(Activo) // Changed from String to TruckState enum
  minCapacity         Int?      // Capacidad mínima (1,500 gal)
  maxCapacity         Int?      // Capacidad máxima (15,000 gal)
  currentLoad         Int       @default(0) // Carga actual en galones
  currentLatitude     Float?    // Ubicación GPS actual
  currentLongitude    Float?    // Ubicación GPS actual
  lastLocationUpdate  DateTime? // Última actualización de ubicación
  lastMaintenanceDate DateTime? // Fecha del último mantenimiento
  nextMaintenanceDate DateTime? // Fecha del próximo mantenimiento
  totalKilometers     Int       @default(0) // Kilómetros totales recorridos
  totalGallonsDelivered Decimal @default(0.00) @db.Decimal(12, 2) // Total de galones entregados
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  // Relaciones
  assignments Assignment[]
  dispatches  Dispatch[]
  truckLocations TruckLocation[]
  truckStats TruckStats[]

  @@map("trucks")
}

model Customer {
  id          Int      @id @default(autoincrement())
  companyname String
  ruc         String?
  address     String?
  // Ubicación predeterminada del cliente
  defaultLatitude  Decimal? @db.Decimal(10, 8)
  defaultLongitude Decimal? @db.Decimal(10, 8)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  discharges       Discharge[]
  clientAssignments ClientAssignment[]
  dispatches      Dispatch[]

  @@map("customers")
}

model Assignment {
  id             Int       @id @default(autoincrement())
  truckId        Int
  driverId       Int
  totalLoaded    Decimal   @db.Decimal(10, 2)
  totalRemaining Decimal   @db.Decimal(10, 2)
  fuelType       FuelType  @default(DIESEL_B5)
  customFuelName String?   // Para combustibles personalizados
  status         AssignmentStatus @default(PROGRAMADO)
  completedAt    DateTime?
  notes          String?

  truck            Truck              @relation(fields: [truckId], references: [id])
  driver           User               @relation(fields: [driverId], references: [id])
  discharges       Discharge[]
  clientAssignments ClientAssignment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("assignments")
  @@index([driverId])
  @@index([truckId])
  @@index([createdAt])
  @@index([fuelType])
  @@index([status])
}

// Modelo mejorado para el sistema de despachos con ubicaciones específicas
model Dispatch {
  id                Int             @id @default(autoincrement())
  dispatchNumber    String          @unique
  year              Int
  truckId           Int
  driverId          Int
  customerId        Int
  fuelType          FuelType
  customFuelName    String?
  quantity          Int
  status            DispatchStatus  @default(PROGRAMADO)
  priority          DispatchPriority @default(NORMAL)

  pickupAddress     String?
  pickupLatitude    Float?
  pickupLongitude   Float?
  deliveryAddress   String
  deliveryLatitude  Float?
  deliveryLongitude Float?
  locationMethod    LocationMethod?

  scheduledDate     DateTime
  startedAt         DateTime?
  loadedAt          DateTime?
  arrivedAt         DateTime?
  completedAt       DateTime?

  notes             String?
  photos            Json?               // ⬅️ Campo nuevo

  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  truck             Truck           @relation(fields: [truckId], references: [id])
  driver            User            @relation(fields: [driverId], references: [id])
  customer          Customer        @relation(fields: [customerId], references: [id])
  locations         DispatchLocation[]
  partialDeliveries PartialDelivery[]

  @@map("dispatches")
  @@index([dispatchNumber])
  @@index([year])
  @@index([status])
  @@index([scheduledDate])
  @@index([truckId])
  @@index([driverId])
  @@index([customerId])
  @@index([deliveryLatitude, deliveryLongitude])
}


// Historial de ubicaciones por despacho (para seguimiento en tiempo real)
model DispatchLocation {
  id          Int      @id @default(autoincrement())
  dispatchId  Int
  latitude    Decimal  @db.Decimal(10, 8)
  longitude   Decimal  @db.Decimal(10, 8)
  accuracy    Float?   // Precisión en metros
  speed       Float?   // Velocidad en km/h
  heading     Float?   // Dirección en grados
  altitude    Float?   // Altitud en metros
  captureMethod LocationCaptureMethod
  notes       String?  // Notas sobre esta ubicación

  dispatch    Dispatch @relation(fields: [dispatchId], references: [id])
  createdAt   DateTime @default(now())

  @@map("dispatch_locations")
  @@index([dispatchId])
  @@index([createdAt])
  @@index([latitude, longitude])
}

// Historial de ubicaciones de camiones (para seguimiento general)
model TruckLocation {
  id          Int      @id @default(autoincrement())
  truckId     Int
  latitude    Decimal  @db.Decimal(10, 8)
  longitude   Decimal  @db.Decimal(10, 8)
  accuracy    Float?   // Precisión en metros
  speed       Float?   // Velocidad en km/h
  heading     Float?   // Dirección en grados
  altitude    Float?   // Altitud en metros
  batteryLevel Int?    // Nivel de batería del dispositivo
  isMoving    Boolean  @default(false)
  address     String?  // Dirección geocodificada

  truck       Truck    @relation(fields: [truckId], references: [id])
  createdAt   DateTime @default(now())

  @@map("truck_locations")
  @@index([truckId])
  @@index([createdAt])
  @@index([latitude, longitude])
}

model Discharge {
  id              Int             @id @default(autoincrement())
  assignmentId    Int
  customerId      Int
  totalDischarged Decimal         @db.Decimal(10, 2)
  status          DischargeStatus @default(pendiente)
  marcadorInicial Decimal?        @db.Decimal(10, 2)
  marcadorFinal   Decimal?        @db.Decimal(10, 2)
  cantidadReal    Decimal?        @db.Decimal(10, 2)
  startTime       DateTime?
  endTime         DateTime?

  assignment Assignment @relation(fields: [assignmentId], references: [id])
  customer   Customer   @relation(fields: [customerId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("discharges")
  @@index([assignmentId])
  @@index([customerId])
  @@index([status])
  @@index([createdAt])
}

model ClientAssignment {
  id                Int       @id @default(autoincrement())
  assignmentId      Int
  customerId        Int
  allocatedQuantity Decimal   @db.Decimal(10, 2)
  deliveredQuantity Decimal   @default(0) @db.Decimal(10, 2)
  remainingQuantity Decimal   @db.Decimal(10, 2)
  status            String    @default("pending")
  marcadorInicial   Decimal?  @db.Decimal(10, 2)
  marcadorFinal     Decimal?  @db.Decimal(10, 2)
  completedAt       DateTime?

  // Ubicación específica de esta entrega
  deliveryLatitude  Decimal?  @db.Decimal(10, 8)
  deliveryLongitude Decimal?  @db.Decimal(10, 8)
  deliveryAddress   String?   // Dirección específica de entrega
  locationMethod    LocationCaptureMethod?
  locationAccuracy  Float?    // Precisión del GPS
  arrivedAt         DateTime? // Cuándo llegó a esta ubicación

  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  assignment Assignment @relation(fields: [assignmentId], references: [id])
  customer   Customer   @relation(fields: [customerId], references: [id])
  partialDeliveries PartialDelivery[]

  @@index([assignmentId])
  @@index([customerId])
  @@index([status])
  @@index([deliveryLatitude, deliveryLongitude])
}

// Tabla para controlar la numeración secuencial
model DispatchSequence {
  id         Int @id @default(autoincrement())
  year       Int @unique
  lastNumber Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("dispatch_sequences")
}

// NUEVAS TABLAS PARA HISTORIAL Y TRAZABILIDAD

// Tabla principal de historial de eventos
model HistoryRecord {
  id          Int               @id @default(autoincrement())
  eventType   HistoryEventType  // Tipo de evento
  entityType  HistoryEntityType // Tipo de entidad afectada
  entityId    Int               // ID de la entidad afectada
  action      String            // Descripción corta de la acción
  description String            // Descripción detallada
  metadata    Json?             // Datos adicionales en formato JSON

  // Ubicación (opcional)
  latitude    Float?
  longitude   Float?
  address     String?

  // Usuario que realizó la acción
  userId      Int
  user        User              @relation(fields: [userId], references: [id])

  // Timestamps
  createdAt   DateTime          @default(now())

  @@map("history_records")
  @@index([eventType])
  @@index([entityType, entityId])
  @@index([userId])
  @@index([createdAt])
}

// Estadísticas agregadas por camión
model TruckStats {
  id                    Int      @id @default(autoincrement())
  truckId               Int
  date                  DateTime @db.Date // Fecha del registro

  // Estadísticas del día
  totalDispatches       Int      @default(0)
  totalGallonsDelivered Decimal  @default(0.00) @db.Decimal(10, 2)
  totalKilometers       Decimal  @default(0.00) @db.Decimal(8, 2)
  averageSpeed          Decimal? @db.Decimal(5, 2)
  fuelEfficiency        Decimal? @db.Decimal(5, 2) // km/gal

  // Estado operativo
  hoursActive           Decimal? @db.Decimal(4, 2)
  hoursIdle             Decimal? @db.Decimal(4, 2)

  truck                 Truck    @relation(fields: [truckId], references: [id])
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@unique([truckId, date])
  @@map("truck_stats")
  @@index([truckId])
  @@index([date])
}

// Estadísticas agregadas por conductor
model DriverStats {
  id                    Int      @id @default(autoincrement())
  driverId              Int
  date                  DateTime @db.Date // Fecha del registro

  // Estadísticas del día
  totalDispatches       Int      @default(0)
  totalGallonsDelivered Decimal  @default(0.00) @db.Decimal(10, 2)
  totalKilometers       Decimal  @default(0.00) @db.Decimal(8, 2)
  completionRate        Decimal  @default(0.00) @db.Decimal(5, 2) // Porcentaje
  averageRating         Decimal? @db.Decimal(3, 2) // 1-5 estrellas

  // Tiempos
  hoursWorked           Decimal? @db.Decimal(4, 2)
  onTimeDeliveries      Int      @default(0)
  lateDeliveries        Int      @default(0)

  driver                User     @relation(fields: [driverId], references: [id])
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@unique([driverId, date])
  @@map("driver_stats")
  @@index([driverId])
  @@index([date])
}

// Entregas parciales para trazabilidad completa
model PartialDelivery {
  id                Int      @id @default(autoincrement())
  dispatchId        Int
  clientAssignmentId Int?    // Opcional, para vincular con asignación específica

  quantity          Decimal  @db.Decimal(10, 2)
  remainingBalance  Decimal  @db.Decimal(10, 2)

  // Ubicación de la entrega parcial
  latitude          Float?
  longitude         Float?
  address           String?
  locationMethod    LocationCaptureMethod?

  // Marcadores del medidor
  marcadorInicial   Decimal? @db.Decimal(10, 2)
  marcadorFinal     Decimal? @db.Decimal(10, 2)

  // Timestamps
  deliveredAt       DateTime
  createdAt         DateTime @default(now())

  // Relaciones
  dispatch          Dispatch @relation(fields: [dispatchId], references: [id])
  clientAssignment  ClientAssignment? @relation(fields: [clientAssignmentId], references: [id])

  @@map("partial_deliveries")
  @@index([dispatchId])
  @@index([deliveredAt])
}

// Alertas del sistema
model SystemAlert {
  id          Int      @id @default(autoincrement())
  type        String   // "maintenance", "fuel_low", "delay", "emergency"
  severity    String   // "low", "medium", "high", "critical"
  title       String
  message     String

  // Entidad relacionada
  entityType  String?  // "truck", "driver", "dispatch"
  entityId    Int?

  // Estado
  isActive    Boolean  @default(true)
  isRead      Boolean  @default(false)
  resolvedAt  DateTime?
  resolvedBy  Int?     // Usuario que resolvió la alerta

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("system_alerts")
  @@index([type])
  @@index([severity])
  @@index([isActive])
  @@index([createdAt])
}

// Tabla para ubicaciones frecuentes
model FrequentLocation {
  id                  Int          @id @default(autoincrement())
  address             String       // Dirección completa
  latitude            Decimal      @db.Decimal(10, 8)
  longitude           Decimal      @db.Decimal(10, 8)
  district            String?      // Distrito
  province            String?      // Provincia
  department          String       @default("Lima") // Departamento
  locationType        LocationType @default(descarga) // Tipo de ubicación
  contactName         String?      // Nombre del contacto
  contactPhone        String?      // Teléfono del contacto
  accessInstructions  String?      // Instrucciones de acceso
  usageCount          Int          @default(1) // Contador de uso
  lastUsed            DateTime     @default(now()) // Última vez usado
  createdBy           Int          // Usuario que creó la ubicación
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt

  // Relaciones
  user                User         @relation(fields: [createdBy], references: [id])

  @@map("frequent_locations")
  @@index([createdBy])
  @@index([usageCount])
  @@index([lastUsed])
  @@index([latitude, longitude])
  @@index([locationType])
}
